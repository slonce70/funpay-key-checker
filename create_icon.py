#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è FunPay Key Checker
"""

import os
from PIL import Image, ImageDraw, ImageFont

def create_app_icon():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–π –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üé® –°–æ–∑–¥–∞—é –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –†–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    sizes = [16, 32, 48, 64, 128, 256]
    
    for size in sizes:
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
        img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # –¶–≤–µ—Ç–∞
        bg_color = (30, 144, 255, 255)      # DodgerBlue
        key_color = (255, 255, 255, 255)    # White
        shadow_color = (0, 0, 0, 100)       # Semi-transparent black
        
        # –†–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞–∑–º–µ—Ä—É –∏–∫–æ–Ω–∫–∏
        margin = size // 8
        key_width = size - 2 * margin
        key_height = size // 3
        
        # –§–æ–Ω - –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∫—Ä—É–≥
        center = size // 2
        radius = center - 2
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        for y in range(size):
            for x in range(size):
                distance = ((x - center) ** 2 + (y - center) ** 2) ** 0.5
                if distance <= radius:
                    # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫ –∫—Ä–∞—è–º
                    ratio = distance / radius
                    r = int(bg_color[0] * (1 - ratio * 0.3))
                    g = int(bg_color[1] * (1 - ratio * 0.2))
                    b = int(bg_color[2])
                    img.putpixel((x, y), (r, g, b, 255))
        
        # –¢–µ–Ω—å –∫–ª—é—á–∞
        shadow_offset = max(1, size // 32)
        draw_key(draw, margin + shadow_offset, center - key_height//2 + shadow_offset, 
                key_width, key_height, shadow_color, size)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
        draw_key(draw, margin, center - key_height//2, key_width, key_height, key_color, size)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        if size == 32:
            img.save('icon_32x32.png', 'PNG')
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω icon_32x32.png")
        
        if size == 64:
            img.save('icon_64x64.png', 'PNG')
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω icon_64x64.png")
    
    # –°–æ–∑–¥–∞–µ–º ICO —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ PNG
        icon_sizes = []
        for size in [16, 32, 48, 64]:
            if size == 32 and os.path.exists('icon_32x32.png'):
                icon_sizes.append(Image.open('icon_32x32.png').resize((size, size), Image.Resampling.LANCZOS))
            elif size == 64 and os.path.exists('icon_64x64.png'):
                icon_sizes.append(Image.open('icon_64x64.png').resize((size, size), Image.Resampling.LANCZOS))
            else:
                # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ –ª–µ—Ç—É
                img = create_single_icon(size)
                icon_sizes.append(img)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ ICO
        if icon_sizes:
            icon_sizes[0].save('icon.ico', format='ICO', sizes=[(img.width, img.height) for img in icon_sizes])
            print("‚úÖ –°–æ–∑–¥–∞–Ω icon.ico")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ICO: {e}")
        # Fallback - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é ICO
        create_simple_ico()

def draw_key(draw, x, y, width, height, color, icon_size):
    """–†–∏—Å–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞"""
    # –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∫–ª—é—á–∞
    head_size = height
    shaft_width = max(2, height // 4)
    teeth_size = max(1, height // 6)
    
    # –ì–æ–ª–æ–≤–∫–∞ –∫–ª—é—á–∞ (–∫—Ä—É–≥)
    head_x = x
    head_y = y
    draw.ellipse([head_x, head_y, head_x + head_size, head_y + head_size], fill=color)
    
    # –û—Ç–≤–µ—Ä—Å—Ç–∏–µ –≤ –≥–æ–ª–æ–≤–∫–µ
    hole_margin = max(1, head_size // 4)
    draw.ellipse([head_x + hole_margin, head_y + hole_margin, 
                 head_x + head_size - hole_margin, head_y + head_size - hole_margin], 
                fill=(0, 0, 0, 0))
    
    # –°—Ç–µ—Ä–∂–µ–Ω—å –∫–ª—é—á–∞
    shaft_x = head_x + head_size
    shaft_y = y + (head_size - shaft_width) // 2
    shaft_length = width - head_size - teeth_size
    
    if shaft_length > 0:
        draw.rectangle([shaft_x, shaft_y, shaft_x + shaft_length, shaft_y + shaft_width], fill=color)
        
        # –ó—É–±—Ü—ã –∫–ª—é—á–∞
        teeth_x = shaft_x + shaft_length
        teeth_y1 = shaft_y
        teeth_y2 = shaft_y + shaft_width
        
        # –í–µ—Ä—Ö–Ω–∏–π –∑—É–±–µ—Ü
        draw.rectangle([teeth_x, teeth_y1 - teeth_size, teeth_x + teeth_size, teeth_y1], fill=color)
        # –ù–∏–∂–Ω–∏–π –∑—É–±–µ—Ü
        draw.rectangle([teeth_x, teeth_y2, teeth_x + teeth_size, teeth_y2 + teeth_size], fill=color)

def create_single_icon(size):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∏–∫–æ–Ω–∫–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    
    # –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω–∏–π —Ñ–æ–Ω
    bg_color = (30, 144, 255, 255)
    key_color = (255, 255, 255, 255)
    
    # –ö—Ä—É–≥–ª—ã–π —Ñ–æ–Ω
    margin = 2
    draw.ellipse([margin, margin, size - margin, size - margin], fill=bg_color)
    
    # –ü—Ä–æ—Å—Ç–æ–π –∫–ª—é—á
    key_margin = size // 4
    key_width = size - 2 * key_margin
    key_height = size // 3
    
    draw_key(draw, key_margin, (size - key_height) // 2, key_width, key_height, key_color, size)
    
    return img

def create_simple_ico():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π ICO –∏–∫–æ–Ω–∫–∏ –∫–∞–∫ fallback"""
    try:
        img = create_single_icon(32)
        img.save('icon.ico', format='ICO', sizes=[(32, 32), (16, 16)])
        print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π icon.ico")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É: {e}")

if __name__ == "__main__":
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è FunPay Key Checker")
    print("=" * 50)
    
    try:
        create_app_icon()
        print("\n‚úÖ –ò–∫–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        icon_files = ['icon.ico', 'icon_32x32.png', 'icon_64x64.png']
        for file in icon_files:
            if os.path.exists(file):
                size = os.path.getsize(file)
                print(f"üìÅ {file} ({size} –±–∞–π—Ç)")
        
    except ImportError:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ PIL (Pillow) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install Pillow")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏: {e}")

    print("\nüéØ –ì–æ—Ç–æ–≤–æ!")
