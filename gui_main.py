import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import configparser
import os
import random
import re
import sys
import time
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –¥–ª—è FunPay API
try:
    import FunPayAPI
    from FunPayAPI.common import exceptions
    from FunPayAPI.types import OrderStatuses as OrderState
except ImportError:
    pass  # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –≤ GUI

try:
    import customtkinter as ctk
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")
    MODERN_GUI = True
except ImportError:
    MODERN_GUI = False

CONFIG_FILE = "config.ini"

class FunPayKeyChecker:
    def __init__(self):
        self.root = ctk.CTk() if MODERN_GUI else tk.Tk()
        self.root.title("FunPay Key Checker v2.0")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 700)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        self.setup_icon()
        
        if not MODERN_GUI:
            self.root.configure(bg='#2b2b2b')
        
        self.account = None
        self.is_running = False
        self.all_sold_keys = []
        
        self.setup_gui()
        self.load_config()
    
    def setup_icon(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not os.path.exists("icon.ico"):
                self.create_icon_programmatically()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –æ–∫–Ω–∞ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            if os.path.exists("icon.ico"):
                # –°–ø–æ—Å–æ–± 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π iconbitmap
                try:
                    self.root.iconbitmap("icon.ico")
                except:
                    pass
                
                # –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ wm_iconbitmap (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏–π tkinter)
                try:
                    self.root.wm_iconbitmap("icon.ico")
                except:
                    pass
                
                # –°–ø–æ—Å–æ–± 3: —á–µ—Ä–µ–∑ PhotoImage (–¥–ª—è PNG)
                try:
                    if os.path.exists("icon_32x32.png"):
                        icon_photo = tk.PhotoImage(file="icon_32x32.png")
                        self.root.iconphoto(True, icon_photo)
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª–∏–ª–∞—Å—å –∏–∑ –ø–∞–º—è—Ç–∏
                        self.icon_photo = icon_photo
                except:
                    pass
                    
            elif os.path.exists("icon.png"):
                # –ï—Å–ª–∏ ico –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å png, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                try:
                    from PIL import Image
                    img = Image.open("icon.png")
                    img.save("icon.ico", format='ICO', sizes=[(32, 32), (16, 16)])
                    self.root.iconbitmap("icon.ico")
                except:
                    pass
                    
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")
    
    def force_icon_update(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è GUI"""
        try:
            if os.path.exists("icon.ico"):
                self.root.iconbitmap("icon.ico")
            if os.path.exists("icon_32x32.png"):
                icon_photo = tk.PhotoImage(file="icon_32x32.png")
                self.root.iconphoto(True, icon_photo)
                self.icon_photo = icon_photo
        except:
            pass
    
    def create_icon_programmatically(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç"""
        try:
            from PIL import Image, ImageDraw
            import math
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É 64x64
            size = 64
            img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
            draw = ImageDraw.Draw(img)
            
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            center = size // 2
            for y in range(size):
                for x in range(size):
                    distance = math.sqrt((x - center)**2 + (y - center)**2)
                    max_distance = math.sqrt(2) * center
                    ratio = min(distance / max_distance, 1.0)
                    
                    start_color = (25, 25, 112)  # MidnightBlue
                    end_color = (30, 144, 255)   # DodgerBlue
                    
                    r = int(start_color[0] + (end_color[0] - start_color[0]) * ratio)
                    g = int(start_color[1] + (end_color[1] - start_color[1]) * ratio)
                    b = int(start_color[2] + (end_color[2] - start_color[2]) * ratio)
                    
                    img.putpixel((x, y), (r, g, b, 255))
            
            # –ü—Ä–æ—Å—Ç–æ–π –∫–ª—é—á
            key_color = (255, 255, 255, 255)
            
            # –û—Å–Ω–æ–≤–∞ –∫–ª—é—á–∞
            draw.rectangle([18, 28, 48, 36], fill=key_color)
            
            # –ì–æ–ª–æ–≤–∫–∞ –∫–ª—é—á–∞
            draw.ellipse([12, 22, 32, 42], fill=key_color)
            draw.ellipse([16, 26, 28, 38], outline=(25, 25, 112), width=2)
            
            # –ó—É–±—Ü—ã
            draw.rectangle([42, 28, 48, 24], fill=key_color)
            draw.rectangle([42, 36, 48, 40], fill=key_color)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            img.save('icon.ico', format='ICO', sizes=[(64, 64), (32, 32), (16, 16)])
            
        except ImportError:
            # –ï—Å–ª–∏ PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–∫–æ–Ω–∫—É
            pass
        except Exception:
            pass
        
    def setup_gui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if MODERN_GUI:
            self.main_frame = ctk.CTkFrame(self.root)
            self.main_frame.pack(fill="both", expand=True, padx=10, pady=10)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
            self.tabview = ctk.CTkTabview(self.main_frame)
            self.tabview.pack(fill="both", expand=True, padx=10, pady=10)
            
            # –í–∫–ª–∞–¥–∫–∏
            self.tab_settings = self.tabview.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            self.tab_analysis = self.tabview.add("üîç –ê–Ω–∞–ª–∏–∑")
            self.tab_results = self.tabview.add("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        else:
            # Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ tkinter
            self.notebook = ttk.Notebook(self.root)
            self.notebook.pack(fill="both", expand=True, padx=10, pady=10)
            
            self.tab_settings = ttk.Frame(self.notebook)
            self.tab_analysis = ttk.Frame(self.notebook)
            self.tab_results = ttk.Frame(self.notebook)
            
            self.notebook.add(self.tab_settings, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            self.notebook.add(self.tab_analysis, text="üîç –ê–Ω–∞–ª–∏–∑")
            self.notebook.add(self.tab_results, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        self.setup_settings_tab()
        self.setup_analysis_tab()
        self.setup_results_tab()
        
    def setup_settings_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if MODERN_GUI:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = ctk.CTkLabel(self.tab_settings, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ FunPay API", 
                               font=ctk.CTkFont(size=20, weight="bold"))
            title.pack(pady=10)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_frame = ctk.CTkFrame(self.tab_settings)
            settings_frame.pack(fill="x", padx=20, pady=10)
            
            # Golden Key
            ctk.CTkLabel(settings_frame, text="Golden Key:", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=20, pady=(20,5))
            self.golden_key_entry = ctk.CTkEntry(settings_frame, width=700, show="*")
            self.golden_key_entry.pack(padx=20, pady=(0,10))
            
            # User Agent
            ctk.CTkLabel(settings_frame, text="User Agent:", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=20, pady=(10,5))
            self.user_agent_entry = ctk.CTkEntry(settings_frame, width=700)
            self.user_agent_entry.pack(padx=20, pady=(0,20))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            safety_frame = ctk.CTkFrame(self.tab_settings)
            safety_frame.pack(fill="x", padx=20, pady=10)
            
            ctk.CTkLabel(safety_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", 
                        font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)
            
            # –ó–∞–¥–µ—Ä–∂–∫–∏
            delay_frame = ctk.CTkFrame(safety_frame)
            delay_frame.pack(fill="x", padx=20, pady=10)
            
            ctk.CTkLabel(delay_frame, text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫):").pack(side="left", padx=10)
            self.min_delay_var = tk.StringVar(value="2")
            self.min_delay_entry = ctk.CTkEntry(delay_frame, textvariable=self.min_delay_var, width=100)
            self.min_delay_entry.pack(side="left", padx=10)
            
            ctk.CTkLabel(delay_frame, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—Å–µ–∫):").pack(side="left", padx=10)
            self.max_delay_var = tk.StringVar(value="5")
            self.max_delay_entry = ctk.CTkEntry(delay_frame, textvariable=self.max_delay_var, width=100)
            self.max_delay_entry.pack(side="left", padx=10)
            
            # –õ–∏–º–∏—Ç—ã
            limits_frame = ctk.CTkFrame(safety_frame)
            limits_frame.pack(fill="x", padx=20, pady=10)
            
            ctk.CTkLabel(limits_frame, text="–õ–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞):").pack(side="left", padx=10)
            self.order_limit_var = tk.StringVar(value="0")
            self.order_limit_entry = ctk.CTkEntry(limits_frame, textvariable=self.order_limit_var, width=100)
            self.order_limit_entry.pack(side="left", padx=10)
            
            # –õ–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
            pages_frame = ctk.CTkFrame(safety_frame)
            pages_frame.pack(fill="x", padx=20, pady=10)
            
            ctk.CTkLabel(pages_frame, text="–õ–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞):").pack(side="left", padx=10)
            self.page_limit_var = tk.StringVar(value="0")
            self.page_limit_entry = ctk.CTkEntry(pages_frame, textvariable=self.page_limit_var, width=100)
            self.page_limit_entry.pack(side="left", padx=10)
            
            ctk.CTkLabel(pages_frame, text="(1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚âà 100 –∑–∞–∫–∞–∑–æ–≤)").pack(side="left", padx=10)
            
            # –ö–Ω–æ–ø–∫–∏
            buttons_frame = ctk.CTkFrame(self.tab_settings)
            buttons_frame.pack(fill="x", padx=20, pady=20)
            
            self.save_config_btn = ctk.CTkButton(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                                               command=self.save_config)
            self.save_config_btn.pack(side="left", padx=10)
            
            self.test_connection_btn = ctk.CTkButton(buttons_frame, text="üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", 
                                                   command=self.test_connection)
            self.test_connection_btn.pack(side="left", padx=10)
        
    def setup_analysis_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        if MODERN_GUI:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = ctk.CTkLabel(self.tab_analysis, text="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π", 
                               font=ctk.CTkFont(size=20, weight="bold"))
            title.pack(pady=10)
            
            # –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞
            input_frame = ctk.CTkFrame(self.tab_analysis)
            input_frame.pack(fill="x", padx=20, pady=10)
            
            # Game ID
            ctk.CTkLabel(input_frame, text="ID –∏–≥—Ä—ã:", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=20, pady=(20,5))
            self.game_id_entry = ctk.CTkEntry(input_frame, width=300, placeholder_text="–ù–∞–ø—Ä–∏–º–µ—Ä: 1234")
            self.game_id_entry.pack(padx=20, pady=(0,10))
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞
            ctk.CTkLabel(input_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=20, pady=(10,5))
            self.lot_name_entry = ctk.CTkEntry(input_frame, width=600, placeholder_text="–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞")
            self.lot_name_entry.pack(padx=20, pady=(0,20))
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            progress_frame = ctk.CTkFrame(self.tab_analysis)
            progress_frame.pack(fill="x", padx=20, pady=10)
            
            self.progress_label = ctk.CTkLabel(progress_frame, text="–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É")
            self.progress_label.pack(pady=10)
            
            self.progress_bar = ctk.CTkProgressBar(progress_frame, width=700)
            self.progress_bar.pack(pady=10)
            self.progress_bar.set(0)
            
            # –õ–æ–≥
            self.log_text = ctk.CTkTextbox(progress_frame, height=250, width=700)
            self.log_text.pack(pady=10, fill="both", expand=True)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            control_frame = ctk.CTkFrame(self.tab_analysis)
            control_frame.pack(fill="x", padx=20, pady=20)
            
            self.start_btn = ctk.CTkButton(control_frame, text="üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", 
                                         command=self.start_analysis, 
                                         font=ctk.CTkFont(size=14, weight="bold"))
            self.start_btn.pack(side="left", padx=10)
            
            self.stop_btn = ctk.CTkButton(control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                        command=self.stop_analysis, state="disabled")
            self.stop_btn.pack(side="left", padx=10)
            
            self.clear_log_btn = ctk.CTkButton(control_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", 
                                             command=self.clear_log)
            self.clear_log_btn.pack(side="right", padx=10)
    
    def setup_results_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if MODERN_GUI:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = ctk.CTkLabel(self.tab_results, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", 
                               font=ctk.CTkFont(size=20, weight="bold"))
            title.pack(pady=10)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_frame = ctk.CTkFrame(self.tab_results)
            stats_frame.pack(fill="x", padx=20, pady=10)
            
            self.stats_label = ctk.CTkLabel(stats_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞", 
                                          font=ctk.CTkFont(size=14))
            self.stats_label.pack(pady=20)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–ª—é—á–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º Treeview)
            table_frame = ctk.CTkFrame(self.tab_results)
            table_frame.pack(fill="both", expand=True, padx=20, pady=10)
            
            # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            columns = ("‚Ññ", "–ö–ª—é—á", "–ó–∞–∫–∞–∑", "–î–∞—Ç–∞")
            self.keys_tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=15)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
            self.keys_tree.heading("‚Ññ", text="‚Ññ")
            self.keys_tree.heading("–ö–ª—é—á", text="–ö–ª—é—á")
            self.keys_tree.heading("–ó–∞–∫–∞–∑", text="ID –ó–∞–∫–∞–∑–∞")
            self.keys_tree.heading("–î–∞—Ç–∞", text="–î–∞—Ç–∞")
            
            self.keys_tree.column("‚Ññ", width=50)
            self.keys_tree.column("–ö–ª—é—á", width=300)
            self.keys_tree.column("–ó–∞–∫–∞–∑", width=150)
            self.keys_tree.column("–î–∞—Ç–∞", width=150)
            
            # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.keys_tree.yview)
            self.keys_tree.configure(yscrollcommand=scrollbar.set)
            
            self.keys_tree.pack(side="left", fill="both", expand=True)
            scrollbar.pack(side="right", fill="y")
            
            # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_frame = ctk.CTkFrame(self.tab_results)
            export_frame.pack(fill="x", padx=20, pady=20)
            
            self.export_all_btn = ctk.CTkButton(export_frame, text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–ª—é—á–µ–π", 
                                              command=self.export_all_keys)
            self.export_all_btn.pack(side="left", padx=10)
            
            self.export_unique_btn = ctk.CTkButton(export_frame, text="üîë –≠–∫—Å–ø–æ—Ä—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö", 
                                                 command=self.export_unique_keys)
            self.export_unique_btn.pack(side="left", padx=10)
            
            self.export_duplicates_btn = ctk.CTkButton(export_frame, text="üë• –≠–∫—Å–ø–æ—Ä—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤", 
                                                     command=self.export_duplicates)
            self.export_duplicates_btn.pack(side="left", padx=10)
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}\n"
        
        if MODERN_GUI:
            self.log_text.insert("end", formatted_message)
            self.log_text.see("end")
        
        self.root.update_idletasks()
    
    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞"""
        if MODERN_GUI:
            self.log_text.delete("1.0", "end")
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if os.path.exists(CONFIG_FILE):
            config = configparser.ConfigParser()
            config.read(CONFIG_FILE, encoding="utf-8")
            
            try:
                if MODERN_GUI:
                    self.golden_key_entry.insert(0, config["FunPay"]["golden_key"])
                    self.user_agent_entry.insert(0, config["FunPay"]["user_agent"])
                    self.min_delay_var.set(config["Safety"]["min_delay_sec"])
                    self.max_delay_var.set(config["Safety"]["max_delay_sec"])
                    
                    if "order_limit" in config["Safety"]:
                        self.order_limit_var.set(config["Safety"]["order_limit"])
                    if "page_limit" in config["Safety"]:
                        self.page_limit_var.set(config["Safety"]["page_limit"])
            except KeyError:
                self.log_message("–û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = configparser.ConfigParser()
        
        if MODERN_GUI:
            config["FunPay"] = {
                "golden_key": self.golden_key_entry.get(),
                "user_agent": self.user_agent_entry.get()
            }
            config["Safety"] = {
                "min_delay_sec": self.min_delay_var.get(),
                "max_delay_sec": self.max_delay_var.get(),
                "order_limit": self.order_limit_var.get(),
                "page_limit": self.page_limit_var.get()
            }
        
        try:
            with open(CONFIG_FILE, "w", encoding="utf-8") as configfile:
                config.write(configfile)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FunPay"""
        def test_thread():
            try:
                self.log_message("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                
                if MODERN_GUI:
                    golden_key = self.golden_key_entry.get()
                    user_agent = self.user_agent_entry.get()
                
                if not golden_key or "–í–ê–®_GOLDEN_KEY_–°–Æ–î–ê" in golden_key:
                    self.log_message("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Golden Key")
                    return
                
                account = FunPayAPI.Account(golden_key=golden_key, user_agent=user_agent)
                account.get()
                
                self.log_message(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {account.username} (ID: {account.id})")
                self.account = account
                
            except exceptions.InvalidGoldenKey:
                self.log_message("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Golden Key")
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        threading.Thread(target=test_thread, daemon=True).start()
    
    def start_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.account:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
            return
        
        game_id = self.game_id_entry.get().strip()
        lot_name = self.lot_name_entry.get().strip()
        
        if not game_id or not lot_name:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            return
        
        try:
            game_id = int(game_id)
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "ID –∏–≥—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return
        
        self.is_running = True
        self.start_btn.configure(state="disabled")
        self.stop_btn.configure(state="normal")
        self.all_sold_keys = []
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for item in self.keys_tree.get_children():
            self.keys_tree.delete(item)
        
        def analysis_thread():
            try:
                self.run_analysis(game_id, lot_name)
            except Exception as e:
                self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            finally:
                self.is_running = False
                self.start_btn.configure(state="normal")
                self.stop_btn.configure(state="disabled")
                self.progress_bar.set(0)
        
        threading.Thread(target=analysis_thread, daemon=True).start()
    
    def stop_analysis(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        self.is_running = False
        self.log_message("üõë –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def run_analysis(self, game_id, lot_name):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            min_delay = float(self.min_delay_var.get())
            max_delay = float(self.max_delay_var.get())
            order_limit = int(self.order_limit_var.get()) if self.order_limit_var.get() != "0" else None
            page_limit = int(self.page_limit_var.get()) if self.page_limit_var.get() != "0" else None
            
            self.log_message(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∏–≥—Ä—ã ID: {game_id}")
            self.log_message(f"üì¶ –õ–æ—Ç: {lot_name}")
            if page_limit:
                self.log_message(f"üìÑ –õ–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü: {page_limit} (‚âà {page_limit * 100} –∑–∞–∫–∞–∑–æ–≤)")
            if order_limit:
                self.log_message(f"üî¢ –õ–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {order_limit}")
            
            # –°–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤
            all_orders = []
            start_from = None
            page_num = 1
            
            while self.is_running:
                self.log_message(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}...")
                
                next_start_from, orders_batch = self.account.get_sells(
                    start_from=start_from,
                    game=game_id,
                    state="closed",
                    include_paid=False,
                    include_refunded=False
                )
                
                if not orders_batch:
                    break
                
                all_orders.extend(orders_batch)
                self.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(orders_batch)} –∑–∞–∫–∞–∑–æ–≤")
                
                if not next_start_from:
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
                if page_limit and page_num >= page_limit:
                    self.log_message(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü: {page_limit}")
                    break
                
                start_from = next_start_from
                page_num += 1
                
                time.sleep(random.uniform(min_delay, max_delay))
            
            if not self.is_running:
                return
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ª–æ—Ç–∞
            self.log_message(f"üîé –§–∏–ª—å—Ç—Ä—É—é –∑–∞–∫–∞–∑—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ª–æ—Ç–∞...")
            target_orders = []
            
            for order in all_orders:
                if not self.is_running:
                    return
                
                description = getattr(order, 'description', '')
                if lot_name in description:
                    target_orders.append(order)
                    
                    if order_limit and len(target_orders) >= order_limit:
                        self.log_message(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤: {order_limit}")
                        break
            
            if not target_orders:
                self.log_message("‚ùå –ó–∞–∫–∞–∑—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ª–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            self.log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(target_orders)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤
            processed = 0
            for order_header in target_orders:
                if not self.is_running:
                    return
                
                processed += 1
                progress = processed / len(target_orders)
                self.progress_bar.set(progress)
                self.progress_label.configure(text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ {processed}/{len(target_orders)}")
                
                self.log_message(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞ {order_header.id} ({processed}/{len(target_orders)})")
                
                try:
                    time.sleep(random.uniform(min_delay, max_delay))
                    
                    full_order = self.account.get_order(order_header.id)
                    if full_order and hasattr(full_order, 'html') and full_order.html:
                        keys = self.extract_keys_from_html(full_order.html)
                        
                        if keys:
                            self.log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}")
                            for key in keys:
                                self.all_sold_keys.append({
                                    'key': key,
                                    'order_id': order_header.id,
                                    'date': getattr(order_header, 'created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                })
                        else:
                            self.log_message("‚ö†Ô∏è –ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                except Exception as e:
                    self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ {order_header.id}: {e}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.update_results()
            self.log_message(f"üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(self.all_sold_keys)} –∫–ª—é—á–µ–π")
            
        except Exception as e:
            self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def extract_keys_from_html(self, html):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ HTML"""
        try:
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(html, 'html.parser')
            
            keys = []
            secret_elements = soup.find_all('span', class_='secret-placeholder')
            
            for element in secret_elements:
                key = element.get_text().strip()
                if key and len(key) > 10:
                    keys.append(key)
            
            return keys
        except Exception:
            return []
    
    def update_results(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.keys_tree.get_children():
            self.keys_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏
        for i, key_data in enumerate(self.all_sold_keys, 1):
            self.keys_tree.insert("", "end", values=(
                i,
                key_data['key'],
                key_data['order_id'],
                key_data['date']
            ))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_keys = len(self.all_sold_keys)
        unique_keys = len(set(k['key'] for k in self.all_sold_keys))
        duplicates = total_keys - unique_keys
        
        stats_text = f"üìä –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {total_keys} | üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique_keys} | üë• –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}"
        self.stats_label.configure(text=stats_text)
    
    def export_all_keys(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–ª—é—á–µ–π"""
        if not self.all_sold_keys:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, "w", encoding="utf-8") as f:
                    for key_data in self.all_sold_keys:
                        f.write(f"{key_data['key']}\n")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.all_sold_keys)} –∫–ª—é—á–µ–π!")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    def export_unique_keys(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π"""
        if not self.all_sold_keys:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
            return
        
        unique_keys = list(set(k['key'] for k in self.all_sold_keys))
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, "w", encoding="utf-8") as f:
                    for key in unique_keys:
                        f.write(f"{key}\n")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(unique_keys)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π!")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    def export_duplicates(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        if not self.all_sold_keys:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        seen = set()
        duplicates = []
        
        for key_data in self.all_sold_keys:
            key = key_data['key']
            if key in seen:
                duplicates.append(key)
            else:
                seen.add(key)
        
        if not duplicates:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, "w", encoding="utf-8") as f:
                    for key in set(duplicates):  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                        f.write(f"{key}\n")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(set(duplicates))} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤!")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import FunPayAPI
        from bs4 import BeautifulSoup
    except ImportError as e:
        print(f"–û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install FunPayAPI beautifulsoup4 customtkinter")
        sys.exit(1)
    
    app = FunPayKeyChecker()
    app.run()